// THIS FILE IS AUTO GENERATED BY GK-CLI DO NOT EDIT!!
package endpoint

import (
	endpoint "github.com/go-kit/kit/endpoint"
	service "pikabu-signaling/signaling/pkg/service"
)

// Endpoints collects all of the endpoints that compose a profile service. It's
// meant to be used as a helper struct, to collect all of the endpoints into a
// single parameter.
type Endpoints struct {
	RegisterEndpoint           endpoint.Endpoint
	WebRTCStartPleaseEndpoint  endpoint.Endpoint
	WebRTCAnswerEndpoint       endpoint.Endpoint
	WebRTCAddCandidateEndpoint endpoint.Endpoint
}

// New returns a Endpoints struct that wraps the provided service, and wires in all of the
// expected endpoint middlewares
func New(s service.SignalingService, mdw map[string][]endpoint.Middleware) Endpoints {
	eps := Endpoints{
		RegisterEndpoint:           MakeRegisterEndpoint(s),
		WebRTCAddCandidateEndpoint: MakeWebRTCAddCandidateEndpoint(s),
		WebRTCAnswerEndpoint:       MakeWebRTCAnswerEndpoint(s),
		WebRTCStartPleaseEndpoint:  MakeWebRTCStartPleaseEndpoint(s),
	}
	for _, m := range mdw["Register"] {
		eps.RegisterEndpoint = m(eps.RegisterEndpoint)
	}
	for _, m := range mdw["WebRTCStartPlease"] {
		eps.WebRTCStartPleaseEndpoint = m(eps.WebRTCStartPleaseEndpoint)
	}
	for _, m := range mdw["WebRTCAnswer"] {
		eps.WebRTCAnswerEndpoint = m(eps.WebRTCAnswerEndpoint)
	}
	for _, m := range mdw["WebRTCAddCandidate"] {
		eps.WebRTCAddCandidateEndpoint = m(eps.WebRTCAddCandidateEndpoint)
	}
	return eps
}
